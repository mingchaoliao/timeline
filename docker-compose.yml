version: '3.7'
services:
  nginx:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    restart: always
    depends_on:
      - api
    volumes:
      - ./etc/production/nginx/conf.d:/etc/nginx/conf.d
      - ./etc/production/nginx/ssl:/etc/nginx/ssl
      - apistorage:/apidist/storage
    networks:
      - api
  api:
    build:
      context: api
      dockerfile: Dockerfile
    user: "1500:1500"
    restart: always
    volumes:
      - apistorage:/apidist/storage
      - backup:/backup
    depends_on:
      - mysql
      - elasticsearch
      - queue
    networks:
      - api
      - db
      - es
      - queue
  queue:
    image: redis:5.0.3-alpine3.9
    restart: always
    volumes:
      - queuedata1:/data
    networks:
      - queue
  horizon:
    image: timeline_api
    user: "1500:1500"
    restart: always
    command: php artisan horizon
    volumes:
      - apistorage:/apidist/storage
      - backup:/backup
    depends_on:
      - mysql
      - elasticsearch
      - queue
    networks:
      - db
      - es
      - queue
  scheduler:
    image: timeline_api
    user: "1500:1500"
    restart: always
    command: /usr/sbin/crond -f
    volumes:
      - apistorage:/apidist/storage
      - backup:/backup
    depends_on:
      - mysql
      - elasticsearch
      - queue
    networks:
      - db
      - es
      - queue
  mysql:
    image: mysql:5.7.25
    command: --disable-partition-engine-check
    restart: always
    volumes:
      - dbdata1:/var/lib/mysql
    env_file:
      - ./etc/production/docker/mysql.env
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
      MYSQL_DATABASE: timeline
      MYSQL_USER: timeline_user
    networks:
      - db
  elasticsearch:
    build: elasticsearch
    restart: always
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    environment:
      discovery.type: single-node
    networks:
      - es
volumes:
  backup:
    driver: local
  esdata1:
    driver: local
  dbdata1:
    driver: local
  apistorage:
    driver: local
  queuedata1:
    driver: local

networks:
  api:
  db:
  es:
  queue: